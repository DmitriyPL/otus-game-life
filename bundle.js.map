{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-game-life/./src/Classes/field.js","webpack://otus-game-life/./src/Classes/cell.js","webpack://otus-game-life/./src/index.js","webpack://otus-game-life/./src/setup.js"],"sourcesContent":["export class Field {\n  state = [];\n\n  aliveCells = 0;\n\n  stateChanged = false;\n\n  canvasX = 0;\n\n  canvasY = 0;\n\n  constructor(canvas, fieldSizeX, fieldSizeY, cellSize) {\n    this.canvas = canvas;\n    this.fieldSizeX = fieldSizeX;\n    this.fieldSizeY = fieldSizeY;\n    this.cellSize = cellSize;\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  setup() {\n    this.canvas.width = this.fieldSizeX * this.cellSize;\n    this.canvas.height = this.fieldSizeY * this.cellSize;\n\n    this.canvasX = this.canvas.offsetLeft + this.canvas.clientLeft;\n    this.canvasY = this.canvas.offsetTop + this.canvas.clientTop;\n\n    this.canvas.addEventListener(\"click\", this.clickHandler.bind(this));\n  }\n\n  getAliveCells() {\n    return this.aliveCells;\n  }\n\n  init(Cell) {\n    for (let y = 0; y < this.fieldSizeY; y += 1) {\n      for (let x = 0; x < this.fieldSizeX; x += 1) {\n        this.state.push(new Cell(x, y, this.cellSize, \"dead\"));\n      }\n    }\n  }\n\n  clickHandler(e) {\n    const x = e.pageX - this.canvasX;\n    const y = e.pageY - this.canvasY;\n\n    /* eslint-disable-next-line */\n    for (const cell of this.state) {\n      const cellX = cell.getCoord(\"x\");\n      const cellY = cell.getCoord(\"y\");\n      const size = cell.getSize();\n\n      if (y > cellY && y < cellY + size && x > cellX && x < cellX + size) {\n        if (cell.getType() === \"dead\") {\n          cell.setType(\"alive\");\n          this.aliveCells += 1;\n        } else {\n          cell.setType(\"dead\");\n          this.aliveCells -= 1;\n        }\n\n        this.draw();\n\n        break;\n      }\n    }\n  }\n\n  draw() {\n    this.state.forEach((cell) => {\n      const x = cell.getCoord(\"x\");\n      const y = cell.getCoord(\"y\");\n      const size = cell.getSize();\n\n      if (cell.getType() === \"dead\") {\n        this.ctx.clearRect(x, y, size, size);\n        this.ctx.strokeRect(x, y, size, size);\n      } else {\n        this.ctx.fillRect(x, y, size, size);\n      }\n    });\n  }\n\n  changeState() {\n    this.stateChanged = false;\n\n    this.state.forEach((cell) => {\n      const cellX = cell.getX();\n      const cellY = cell.getY();\n\n      const aliveNeighbours = this.getAliveNeighbours(cellX, cellY);\n\n      if (cell.getType() === \"dead\" && aliveNeighbours === 3) {\n        cell.setNextType(\"alive\");\n        this.aliveCells += 1;\n        this.stateChanged = true;\n      } else if (\n        cell.getType() === \"alive\" &&\n        (aliveNeighbours < 2 || aliveNeighbours > 3)\n      ) {\n        cell.setNextType(\"dead\");\n        this.aliveCells -= 1;\n        this.stateChanged = true;\n      }\n    });\n\n    this.draw();\n\n    this.state.forEach((cell) => {\n      const type = cell.getType();\n      const nextType = cell.getNextType();\n\n      if (nextType !== type && nextType !== \"\") {\n        cell.setType(nextType);\n      }\n    });\n  }\n\n  getAliveNeighbours(cellX, cellY) {\n    let alive = 0;\n\n    const neighboursCoords = [\n      [cellX - 1, cellY - 1],\n      [cellX - 1, cellY],\n      [cellX - 1, cellY + 1],\n      [cellX, cellY - 1],\n      [cellX, cellY + 1],\n      [cellX + 1, cellY - 1],\n      [cellX + 1, cellY],\n      [cellX + 1, cellY + 1],\n    ];\n\n    /* eslint-disable-next-line */\n    for (const coord of neighboursCoords) {\n      const x = coord[0];\n      const y = coord[1];\n\n      const cellType = this.getNeighbourType(x, y);\n\n      if (cellType === \"alive\") {\n        alive += 1;\n      }\n    }\n\n    return alive;\n  }\n\n  getNeighbourType(x, y) {\n    if (x < 0 || x > this.fieldSizeX - 1 || y < 0 || y > this.fieldSizeY - 1) {\n      return \"dead\";\n    }\n    const findedCell = this.state.find(\n      (cell) => cell.getX() === x && cell.getY() === y\n    );\n    return findedCell.getType();\n  }\n\n  clear() {\n    this.state.forEach((cell) => {\n      cell.setType(\"dead\");\n      cell.setNextType(\"\");\n    });\n\n    this.draw();\n  }\n\n  getStateChanged() {\n    return this.stateChanged;\n  }\n}\n","export class Cell {\n  nextType = \"\";\n\n  constructor(x, y, size, type) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n    this.type = type;\n  }\n\n  setType(type) {\n    this.type = type;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getNextType() {\n    return this.nextType;\n  }\n\n  setNextType(type) {\n    this.nextType = type;\n  }\n\n  getCoord(coord) {\n    return this[coord] * this.size;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  getX() {\n    return this.x;\n  }\n\n  getY() {\n    return this.y;\n  }\n}\n","import { data as fieldParams } from \"./setup.js\";\nimport { Field } from \"./Classes/field.js\";\nimport { Cell } from \"./Classes/cell.js\";\n\nfunction run(field) {\n  localStorage.setItem(\"stopGame\", \"false\");\n\n  const refreshId = setInterval(() => {\n    field.changeState();\n    if (\n      field.getStateChanged() === false ||\n      localStorage.getItem(\"stopGame\") === \"true\"\n    ) {\n      clearInterval(refreshId);\n    }\n  }, 100);\n}\n\nfunction init() {\n  localStorage.setItem(\"stopGame\", \"false\");\n\n  const { fieldSizeX } = fieldParams;\n  const { fieldSizeY } = fieldParams;\n  const { cellSize } = fieldParams;\n\n  const canvas = document.getElementById(\"game-field\");\n\n  const field = new Field(canvas, fieldSizeX, fieldSizeY, cellSize);\n  field.setup();\n  field.init(Cell);\n  field.draw();\n\n  const btnDoStep = document.getElementById(\"do-step\");\n  btnDoStep.addEventListener(\"click\", field.changeState.bind(field));\n\n  const btnClearField = document.getElementById(\"clear-field\");\n  btnClearField.addEventListener(\"click\", field.clear.bind(field));\n\n  const btnStartGame = document.getElementById(\"start-game\");\n  btnStartGame.addEventListener(\"click\", () => {\n    run(field);\n  });\n\n  const btnStopGame = document.getElementById(\"stop-game\");\n  btnStopGame.addEventListener(\"click\", () => {\n    localStorage.setItem(\"stopGame\", \"true\");\n  });\n}\n\ninit();\n","export const data = {\n  cellSize: 15,\n  fieldSizeX: 50,\n  fieldSizeY: 50,\n};\n"],"names":["Field","canvas","fieldSizeX","fieldSizeY","cellSize","this","ctx","getContext","width","height","canvasX","offsetLeft","clientLeft","canvasY","offsetTop","clientTop","addEventListener","clickHandler","bind","aliveCells","Cell","y","x","state","push","e","pageX","pageY","cell","cellX","getCoord","cellY","size","getSize","getType","setType","draw","forEach","clearRect","strokeRect","fillRect","stateChanged","getX","getY","aliveNeighbours","getAliveNeighbours","setNextType","type","nextType","getNextType","alive","coord","getNeighbourType","find","localStorage","setItem","document","getElementById","field","setup","init","changeState","clear","refreshId","setInterval","getStateChanged","getItem","clearInterval","run"],"sourceRoot":""}